/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        // Check if the list is empty
        if (head == null)
            return head;

        // Initialize pointers for traversal
        ListNode temp = head;
        ListNode prev = temp;

        // Handle the case where the first element needs to be removed
        while (head != null && head.val == val) {
            head = head.next;
        }

        // If the list becomes empty after removal, return null
        if (head == null)
            return null;

        // Traverse the list and remove nodes with the specified value
        while (temp != null) {
            if (temp.val == val) {
                // Update the 'next' pointer of the previous node to skip the current node
                prev.next = temp.next;
                // Move the 'temp' pointer to the next node
                temp = temp.next;
            } else {
                // Move both pointers to the next node
                prev = temp;
                temp = temp.next;
            }
        }

        // Return the modified head of the list
        return head;
    }
}
/**This code removes all occurrences of the specified value (val) from a linked list. 
The first loop handles the case where the value to be removed is in the first node, and
the second loop traverses the list to remove other occurrences of the value. 
The prev pointer is used to update the next pointer of the previous node when a node with the specified value is encountered.*/






